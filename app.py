# -*- coding: utf-8 -*-
"""kats-et-expt_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vL_2eo6ezuREwMqC1qi60YfdYD3D5I4s
"""

!pip install kats
!pip install streamlit

import streamlit as st
import pandas as pd

cities=["Berkeley","Hayward","Livermore","Mountain View","Richmond","San Jose"]
status=st.radio("Select city:",cities)

#
# Bypass to run the code further
#
status="Livermore"

city_hyphen=status.replace(" ","_")
download_link=f"https://raw.githubusercontent.com/danikagupta/et_data1/main/{city_hyphen}.csv"
etdata=pd.read_csv(download_link)
st.dataframe(etdata)

len(etdata)

etdata.head()

import numpy as np
from datetime import datetime, timedelta
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings('ignore')

from kats.consts import TimeSeriesData

#et_ts = TimeSeriesData(time=etdata.time, value=train.PM_Dongsi)
etdata.rename(columns = {'Ensemble ET':'ET'}, inplace = True)

#pollution_ts = TimeSeriesData(train)
et_ts = TimeSeriesData(time=etdata.DateTime, value=etdata.ET)

len(et_ts)
l2=int(len(et_ts)/2)
et_ts_short = et_ts[0:l2]
et_ts_rest = et_ts[l2:]
print(et_ts_short)
print(et_ts_rest)

# Must pass the name of the value columns to plot
et_ts.plot(cols=['ET'])
plt.show()

print(type(et_ts))

from kats.models.prophet import ProphetModel, ProphetParams

# create a model param instance
params = ProphetParams(seasonality_mode='multiplicative') # additive mode gives worse results

# create a prophet model instance
m = ProphetModel(et_ts_short, params)

# fit model simply by calling m.fit()
m.fit()

# make prediction for next 30 month
fcst = m.predict(steps=40, include_history=True)

# Save Model
#import pickle
#md = pickle.dumps(m)
#with open(' housePredictor.pickle', 'wb') as handle:
#  pickle.dump(md, handle)

# the predict method returns a dataframe as follows
fcst.head(10)

m.plot()

# import param and model from `kats.models.theta`
from kats.models.theta import ThetaModel, ThetaParams

# create ThetaParam with specifying seasonality param value
params = ThetaParams(m=12)

# create ThetaModel with given data and parameter class
m = ThetaModel(data=et_ts, params=params)

# call fit method to fit model
m.fit()

# call predict method to predict the next 30 steps
res = m.predict(steps=30, include_history=True, alpha=0.2)

# visualize the results
m.plot()

et_ts_rest.plot(cols=['ET'])
plt.show()

from kats.models.sarima import SARIMAModel, SARIMAParams
warnings.simplefilter(action='ignore')

# create SARIMA param class
params = SARIMAParams(
    p = 2, 
    d=1, 
    q=1, 
    trend = 'ct', 
    seasonal_order=(1,0,1,12)
    )

# initiate SARIMA model
m = SARIMAModel(data=et_ts, params=params)

# fit SARIMA model
m.fit()

# generate forecast values
fcst = m.predict(steps=30, include_history=True) 
#    freq="MS",
#    include_history=True
#    )

# make plot to visualize
m.plot()

from kats.models.holtwinters import HoltWintersParams, HoltWintersModel
warnings.simplefilter(action='ignore')


params = HoltWintersParams(
            trend="add",
            #damped=False,
            seasonal="mul",
            seasonal_periods=12,
        )
m = HoltWintersModel(
    data=et_ts, 
    params=params)

m.fit()
fcst = m.predict(steps=10, include_history=True, alpha = 0.1)
m.plot()
fcst.head(100)